# This config demonstrates KubeRay's Ray autoscaler integration.
# The resource requests and limits in this config are too small for production!
# For an example with more realistic resource configuration, see
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # A unique identifier for the head node and workers of this cluster.
  name: raycluster-autoscaler
spec:
  rayVersion: '2.2.0'
  enableInTreeAutoscaling: true
  autoscalerOptions:
    upscalingMode: Default
    idleTimeoutSeconds: 60
    imagePullPolicy: Always
    securityContext: {}
    env: []
    envFrom: []
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "500m"
        memory: "512Mi"
  # Ray head pod template
  headGroupSpec:
    serviceType: ClusterIP
    rayStartParams:
      dashboard-host: '0.0.0.0'
      block: 'true'
    template:
      spec:
        imagePullSecrets:
          - name: regcred
        containers:
        # The Ray head container
        - name: ray-head
          image: nexus.dataspartan.com:9443/turintech/ray/ml-gpu-public-deps:latest
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
          imagePullPolicy: Always
          ports:
          - containerPort: 6379
            name: gcs
          - containerPort: 8265
            name: dashboard
          - containerPort: 10001
            name: client
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","ray stop"]
          resources:
            limits:
              cpu: "4"
              memory: "8G"
            requests:
              cpu: "4"
              memory: "8G"
  workerGroupSpecs:
  - replicas: 1
    minReplicas: 1
    maxReplicas: 5
    groupName: cpu-group
    rayStartParams:
      block: 'true'
    template:
      spec:
        imagePullSecrets:
          - name: regcred
        initContainers:
        # the env var $RAY_IP is set by the operator if missing, with the value of the head service name
        - name: init
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for K8s Service $RAY_IP; sleep 2; done"]
        containers:
        - name: ray-cpu-worker
          image: nexus.dataspartan.com:9443/turintech/ray/ml-gpu-public-deps:latest
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","ray stop"]
          resources:
            limits:
              cpu: "8"
              memory: "16G"
            requests:
              cpu: "8"
              memory: "16G"
  - replicas: 1
    minReplicas: 1
    maxReplicas: 4
    groupName: gpu-group
    rayStartParams:
      block: 'true'
    template:
      spec:
        imagePullSecrets:
          - name: regcred
        initContainers:
          # the env var $RAY_IP is set by the operator if missing, with the value of the head service name
          - name: init
            image: busybox:1.28
            command: [ 'sh', '-c', "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for K8s Service $RAY_IP; sleep 2; done" ]
        containers:
          - name: ray-gpu-worker
            image: nexus.dataspartan.com:9443/turintech/ray/ml-gpu-public-deps:latest
            securityContext:
              capabilities:
                add:
                  - SYS_PTRACE
            lifecycle:
              preStop:
                exec:
                  command: [ "/bin/sh","-c","ray stop" ]
            resources:
              limits:
                cpu: "8"
                gpu: "1"
                memory: "24G"
              requests:
                cpu: "8"
                gpu: "1"
                memory: "24G"
